unit ManageDetention_u;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, DB, ADODB, Grids, Buttons;

type
  TfrmMDetention = class(TForm)
    Panel1: TPanel;
    Label1: TLabel;
    Label7: TLabel;
    GroupBox1: TGroupBox;
    cbSession: TComboBox;
    adoMdet: TADOConnection;
    adoQMD: TADOQuery;
    dsMdet: TDataSource;
    sgEdit: TStringGrid;
    Panel2: TPanel;
    Label2: TLabel;
    GroupBox2: TGroupBox;
    rgAbsent: TRadioGroup;
    rgBadBehaviour: TRadioGroup;
    BitBtn1: TBitBtn;
    BitBtn2: TBitBtn;
    procedure FormCreate(Sender: TObject);
    procedure sgEditSetEditText(Sender: TObject; ACol, ARow: Integer;
      const Value: string);
    procedure cbSessionChange(Sender: TObject);
    procedure BitBtn1Click(Sender: TObject);
    procedure set_User(s: String);
  private
  vUser : String;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmMDetention: TfrmMDetention;

implementation

{$R *.dfm}

procedure TfrmMDetention.BitBtn1Click(Sender: TObject);
var
  I: Integer;
begin
if rgAbsent.ItemIndex = 0 then    // Absent Marked for next detention
begin
    for I := 1 to sgEdit.RowCount do
    begin
    if (sgEdit.Cells[2, I] = 'n')
    OR (sgEdit.Cells[2, I] = 'N') then
    begin
        with adoQMd do
        begin
          SQL.Clear;
          SQL.Add('INSERT INTO [Action](Learner, Measure, ActDate, ApprovedBy)');
          SQL.Add('VALUES(''' + sgEdit.Cells[1, I] +
          ''',''Detention'',''' + cbSession.Text + ''',''' + vUser + '''');
          ExecSQL;
        end;
    end;
    end;
end;

end;

procedure TfrmMDetention.cbSessionChange(Sender: TObject);
var
grabDate : String;
Counter  : Integer;
begin
 if cbSession.Text <> '' then
 begin
    grabDate := cbSession.Text;
    with adoQMd do
    begin
      SQL.Clear;
      SQL.Add('SELECT [Learner] FROM [Action]');
      SQL.Add('WHERE [ActDate] = ''' + grabDate + ''' AND [Measure] = ''Detention''');
      Open;
    end;
    for Counter := 1 to adoQMd.RecordCount do
      begin
        sgEdit.Cells[0, Counter] := IntToStr(Counter);
        sgEdit.Cells[1, Counter] := adoQMd['Learner'];
        adoQMd.Next
      end;
 end;
end;

procedure TfrmMDetention.FormCreate(Sender: TObject);
var
I         :   Integer;
begin
  adoMdet.ConnectionString := 'Provider=Microsoft.Jet.OLEDB.4.0; Data Source='
                            + ExtractFilePath(Application.ExeName)
                            + 'maindb.mdb; Persist Security Info=False';
  adoMdet.LoginPrompt      := False;
  adoQMd.Connection        := adoMdet;

  adoQMd.SQL.Clear;
  adoQMd.SQL.Add('SELECT DISTINCT [ActDate] FROM [ACTION]');
  adoQMd.SQL.Add('WHERE [Measure] = ''Detention''');
  adoQMd.Open;

  for I := 0 to adoQMd.RecordCount - 1 do
    begin
      cbSession.Items.Add(adoQMd['ActDate']);
    end;

  sgEdit.Options      := sgEdit.Options+[goEditing];
  sgEdit.ColWidths[1] := sgEdit.ColWidths[1]*2;
  sgEdit.ColWidths[0] := sgEdit.ColWidths[0] div 2;
  sgEdit.ColWidths[3] := sgEdit.ColWidths[3] + 20;

  sgEdit.Cells[0,0] := '#';
  sgEdit.Cells[1,0] := 'Learner';
  sgEdit.Cells[2,0] := 'Present';
  sgEdit.Cells[3,0] := 'Bad Behaviour';
end;

procedure TfrmMDetention.set_User(s:String);
begin
  frmMDetention.vUser := s;
end;

procedure TfrmMDetention.sgEditSetEditText(Sender: TObject; ACol, ARow: Integer;
  const Value: string);
begin
 if (ACol = 2) OR (ACol = 3) then
 begin
   if (sgEdit.Cells[ACol, ARow] <> 'y')
   AND (sgEdit.Cells[ACol, ARow] <> 'n')
   AND (sgEdit.Cells[ACol, ARow] <> 'Y')
   AND (sgEdit.Cells[ACol, ARow] <> 'N')
   AND (sgEdit.Cells[ACol, ARow] <> '') then
   begin
     ShowMessage('Invalid entry. Choose "y" - Yes or "n" - No');
   end;
 end;

end;

end.
